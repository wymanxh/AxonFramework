/*
 * Copyright (c) 2010-2014. Axon Framework
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.axonframework.eventsourcing.eventstore.mongo;

import com.mongodb.DBCollection;
import com.mongodb.MongoException;
import org.axonframework.eventhandling.EventMessage;
import org.axonframework.eventsourcing.DomainEventMessage;
import org.axonframework.eventsourcing.eventstore.DomainEventData;
import org.axonframework.eventsourcing.eventstore.TrackedEventData;
import org.axonframework.eventsourcing.eventstore.TrackingToken;
import org.axonframework.serialization.Serializer;

import java.util.List;
import java.util.Optional;

/**
 * Interface towards the mechanism that prescribes the structure in which events are stored in the Event Store. Events
 * are provided in "commits", which represent a number of events generated by the same aggregate, inside a single Unit
 * of Work. Implementations may choose to use this fact, or ignore it.
 *
 * @author Allard Buijze
 * @author Rene de Waele
 */
public interface StorageStrategy {

    void appendEvents(DBCollection eventCollection, List<? extends EventMessage<?>> events,
                      Serializer serializer) throws MongoException.DuplicateKey;

    void appendSnapshot(DBCollection snapshotCollection, DomainEventMessage<?> snapshot,
                        Serializer serializer) throws MongoException.DuplicateKey;

    void deleteSnapshots(DBCollection snapshotCollection, String aggregateIdentifier);

    /**
     * Provides a cursor for access to all events for an aggregate with given <code>aggregateIdentifier</code>, with a
     * sequence number equal or higher than the given <code>firstSequenceNumber</code>. The returned documents should be
     * ordered chronologically (typically by using the sequence number).
     *
     * @param eventCollection     The collection in which to find the events
     * @param aggregateIdentifier The identifier of the aggregate to query
     * @param firstSequenceNumber The sequence number of the first event to return
     * @param batchSize           The maximum number of events to fetch
     * @return a Query object that represent a query for events of an aggregate
     */
    List<? extends DomainEventData<?>> findDomainEvents(DBCollection eventCollection, String aggregateIdentifier,
                                                        long firstSequenceNumber, int batchSize);


    List<? extends TrackedEventData<?>> findTrackedEvents(DBCollection eventCollection, TrackingToken lastToken,
                                                          int batchSize);

    /**
     * Finds the entry containing the last snapshot event for an aggregate with given <code>aggregateIdentifier</code>
     * in the given <code>collection</code>.
     *
     * @param snapshotCollection  The collection to find the last snapshot event in
     * @param aggregateIdentifier The identifier of the aggregate to find a snapshot for
     * @return an optional with DomainEventData of the snapshot if found
     */
    Optional<? extends DomainEventData<?>> findLastSnapshot(DBCollection snapshotCollection,
                                                            String aggregateIdentifier);

    /**
     * Ensure that the correct indexes are in place.
     *
     * @param eventsCollection    The collection containing the documents representing commits and events.
     * @param snapshotsCollection The collection containing the document representing snapshots
     */
    void ensureIndexes(DBCollection eventsCollection, DBCollection snapshotsCollection);
}
